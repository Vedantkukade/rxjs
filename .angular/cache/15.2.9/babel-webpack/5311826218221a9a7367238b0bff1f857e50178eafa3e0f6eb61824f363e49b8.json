{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nlet CustomObservableComponent = class CustomObservableComponent {\n  constructor(service) {\n    this.service = service;\n  }\n  ngOnInit() {\n    const source = Observable.create(observer => {\n      setTimeout(() => {\n        observer.next('Angular');\n      }, 1000);\n      setTimeout(() => {\n        observer.next('TypeScript');\n      }, 2000);\n      setTimeout(() => {\n        observer.next('JacaScript');\n        observer.complete();\n      }, 3000);\n      setTimeout(() => {\n        observer.next('Java');\n        // observer.error(new Error('limit exceeded'));\n      }, 4000);\n      setTimeout(() => {\n        observer.next('Django');\n      }, 5000);\n    });\n    source.subscribe(res => {\n      // console.log(res);\n      this.service.print(res, 'elcontainer');\n    }, err => {\n      this.techstatus = 'error';\n    }, () => {\n      this.techstatus = 'completed';\n    });\n    const array = ['Angular', 'TypeScript', 'JavaScript', 'Django', 'Python'];\n    const source2 = Observable.create(observer => {\n      let count = 0;\n      setInterval(() => {\n        observer.next(array[count]);\n        if (count >= 3) {\n          // this.broad.unsubscribe();\n          observer.error(new Error('Limit Exceed'));\n        }\n        if (count >= 5) {\n          observer.complete();\n        }\n        count++;\n      }, 1000);\n    });\n    this.broad = source2.subscribe(res => {\n      // console.log(res);\n      this.service.print(res, 'elcontainer2');\n    }, err => {\n      this.techstatus2 = 'error';\n    }, () => {\n      this.techstatus2 = 'completed';\n    });\n    const namesArray = ['Vedant', 'Nilesh', 'Jaydip', 'Achyut', 'Swarali', 'Poorva'];\n    const cusobs3 = Observable.create(observer => {\n      let count = 0;\n      setInterval(() => {\n        observer.next(namesArray[count]);\n        if (count >= 3) {\n          // observer.error(new Error('Error Occured'))\n        }\n        if (count >= 5) {\n          observer.complete();\n        }\n        count++;\n      }, 1000);\n    });\n    cusobs3.subscribe(res => {\n      console.log(res);\n      this.names = res;\n    }, err => {\n      this.namestatus = 'completed';\n    }, () => {\n      this.namestatus = 'error';\n    });\n  }\n};\nCustomObservableComponent = __decorate([Component({\n  selector: 'app-custom-observable',\n  templateUrl: './custom-observable.component.html',\n  styleUrls: ['./custom-observable.component.css']\n})], CustomObservableComponent);\nexport { CustomObservableComponent };","map":{"version":3,"mappings":"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","names":["Component","Observable","CustomObservableComponent","constructor","service","ngOnInit","source","create","observer","setTimeout","next","complete","subscribe","res","print","err","techstatus","array","source2","count","setInterval","error","Error","broad","techstatus2","namesArray","cusobs3","console","log","names","namestatus","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Vedant\\Senwell\\Angular\\senwell\\Projects\\rxjs\\src\\app\\Modules\\rxjs\\Components\\observable\\custom-observable\\custom-observable.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable, Subscription, interval, timeInterval } from 'rxjs';\nimport { DesignutilityService } from '../../../services/designutility.service';\n\n@Component({\n  selector: 'app-custom-observable',\n  templateUrl: './custom-observable.component.html',\n  styleUrls: ['./custom-observable.component.css']\n})\nexport class CustomObservableComponent implements OnInit {\n\n\n  constructor(private service: DesignutilityService) {\n\n  }\n  techstatus: any;\n  techstatus2:any;\n  broad!:Subscription;\n  names:any;\n  namestatus:any;\n\n  ngOnInit(): void {\n\n    const source = Observable.create((observer: {\n      complete(): unknown;\n      error(arg0: any): unknown; next: (arg0: string) => void;\n    }) => {\n\n      setTimeout(() => {\n        observer.next('Angular');\n      }, 1000);\n\n      setTimeout(() => {\n        observer.next('TypeScript');\n      }, 2000);\n\n      setTimeout(() => {\n        observer.next('JacaScript');\n        observer.complete();\n\n      }, 3000);\n\n      setTimeout(() => {\n        observer.next('Java');\n        // observer.error(new Error('limit exceeded'));\n\n      }, 4000);\n\n      setTimeout(() => {\n        observer.next('Django');\n      \n\n      }, 5000);\n\n    })\n\n    source.subscribe((res: any) => {\n      // console.log(res);\n      this.service.print(res, 'elcontainer')\n    },\n\n      (err: any) => {\n        this.techstatus = 'error'\n      },\n      () => {\n        this.techstatus = 'completed';\n      }\n\n    )\n\n\n\n    const array=['Angular','TypeScript','JavaScript','Django','Python']\n    const source2 = Observable.create((observer: any) => {\n      let count=0\n      setInterval(() => {\n        observer.next(array[count]);\n\n        if(count>=3){\n          // this.broad.unsubscribe();\n          observer.error(new Error('Limit Exceed'))\n          \n        }\n\n        if(count>=5){\n          observer.complete()\n          \n        }\n        count++\n      }, 1000)\n    })\n\n\n   this.broad=source2.subscribe((res: any)=>{\n\n    // console.log(res);\n    this.service.print(res,'elcontainer2');\n    },\n    ((err: any)=>{\n      this.techstatus2='error'\n    }),\n    ()=>{\n      this.techstatus2='completed'\n    }\n    )\n\n\n    const namesArray=['Vedant','Nilesh','Jaydip','Achyut','Swarali','Poorva']\n    const cusobs3=Observable.create((observer:any)=>{\n     let count=0\n      setInterval(()=>{\n        observer.next(namesArray[count])\n        if(count>=3){\n          // observer.error(new Error('Error Occured'))\n        }\n  \n        if(count>=5){\n          observer.complete();\n        }\n  \n        count++\n      },1000)\n\n     \n    })\n\n\n    cusobs3.subscribe((res:any)=>{\n\n      console.log(res);\n      this.names=res;\n    },\n    (err:any)=>{\n      this.namestatus='completed'\n    },\n    ()=>{\n      this.namestatus='error'\n    }\n    )\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}